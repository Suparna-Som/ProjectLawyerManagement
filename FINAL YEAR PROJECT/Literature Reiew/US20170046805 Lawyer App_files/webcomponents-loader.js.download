/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 * modified by Normunds
 */
(function () {
  // polyfill CustomEvent
  if ( typeof window.CustomEvent === "function" ) return false;
  function CustomEvent ( event, params ) {
    params = params || { bubbles: false, cancelable: false, detail: null };
    var evt = document.createEvent( 'CustomEvent' );
    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
    return evt;
   }
  window.CustomEvent = CustomEvent;
})();
(function () {
  'use strict';
  var scriptName = 'webcomponents-loader.js'; // search for this script
  var script = document.querySelector('script[src*="' + scriptName + '"]');
  var navbarSelector = 'wipo-navbar';

  document.addEventListener('WebComponentsReady', function () {
    var scripts = [];
    try {
      scripts = loadAfterNavbar;
    } catch (e) { }
    if (Array.isArray(scripts) && scripts.length > 0) {
      loadAll(loadAfterNavbar, 0, loadAfterNavbarCallbacks);
    }
  });

  window.navbarAvailable = function (name) {
    switch (document.createElement(name).constructor) {
      case HTMLElement:
      case HTMLUnknownElement:
        return false;
    }
    return true;
  }.bind(this, navbarSelector);
  function urlOf(name) {
    return script.src.replace(scriptName, name);
  }
  function loadJS(url, cb) {
    var script = document.createElement('script');
    script.src = url;
    script.onload = cb;
    script.onerror = function () {
      console.error(scriptName, navbarSelector, 'could not load', url);
    };
    document.head.appendChild(script);
  }

  function loadAll(arr, i, callbacks) {
    if (i < arr.length) {
      loadJS(arr[i], function () {
        console.log(scriptName, 'loaded', arr[i]);
        loadAll(arr, ++i, callbacks);
      });
    } else {
      if (callbacks && Array.isArray(callbacks)) {
        for (var j = 0; j < callbacks.length; j++) {
          callbacks[j]();
        }
      };
    }
  }

  function launchRunStuff() {
    if (window.navbarAvailable()) {
      // NOOP (attempted second loading)
      console.log(scriptName, navbarSelector, 'already present');
    } else if (window.customElements) {
      // CHROME, inline polyfill
      (function () { if (void 0 === window.Reflect || void 0 === window.customElements || window.customElements.polyfillWrapFlushCallback) return; const a = HTMLElement; window.HTMLElement = function HTMLElement() { return Reflect.construct(a, [], this.constructor) }, HTMLElement.prototype = a.prototype, HTMLElement.prototype.constructor = HTMLElement, Object.setPrototypeOf(HTMLElement, a); })();
      // then claim all done and ignore the rest; don't run stuff
      window.WebComponents = { ready: true };
      document.dispatchEvent(new CustomEvent('WebComponentsReady', { bubbles: true }));
    } else if (!!window.MSInputMethodContext && !!document.documentMode) {
      // IE
      window.navbarIE = true;
      runStuff();
    } else {
      // FF, Safari, Edge
      runStuff();
    }
  }

  launchRunStuff();

  /**
   * Basic flow of the loader process
   * 
   * take below comment with a pinch of salt
   * the original code modified to enable it being loaded asyncronously
   * and repeatedly
   *
   * There are 4 flows the loader can take when booting up
   *
   * - Synchronous script, no polyfills needed
   *   - wait for `DOMContentLoaded`
   *   - fire WCR event, as there could not be any callbacks passed to `waitFor`
   *
   * - Synchronous script, polyfills needed
   *   - document.write the polyfill bundle
   *   - wait on the `load` event of the bundle to batch Custom Element upgrades
   *   - wait for `DOMContentLoaded`
   *   - run callbacks passed to `waitFor`
   *   - fire WCR event
   *
   * - Asynchronous script, no polyfills needed
   *   - wait for `DOMContentLoaded`
   *   - run callbacks passed to `waitFor`
   *   - fire WCR event
   *
   * - Asynchronous script, polyfills needed
   *   - Append the polyfill bundle script
   *   - wait for `load` event of the bundle
   *   - batch Custom Element Upgrades
   *   - run callbacks pass to `waitFor`
   *   - fire WCR event
   */

  var polyfillsLoaded = false;
  var whenLoadedFns = [];
  var allowUpgrades = false;
  var flushFn;

  function fireEvent() {
    window.WebComponents.ready = true;
    document.dispatchEvent(new CustomEvent('WebComponentsReady', { bubbles: true }));
  }

  function batchCustomElements() {
    if (window.customElements && customElements.polyfillWrapFlushCallback) {
      customElements.polyfillWrapFlushCallback(function (flushCallback) {
        flushFn = flushCallback;
        if (allowUpgrades) {
          flushFn();
        }
      });
    }
  }

  function asyncReady() {
    batchCustomElements();
    ready();
  }

  function ready() {
    // bootstrap <template> elements before custom elements
    if (window.HTMLTemplateElement && HTMLTemplateElement.bootstrap) {
      HTMLTemplateElement.bootstrap(window.document);
    }
    polyfillsLoaded = true;
    allowUpgrades = true;
    fireEvent();
  }

  function runStuff() {
    var url;

    window.WebComponents = window.WebComponents || {};
    window.WebComponents.ready = window.WebComponents.ready || false;
    window.WebComponents._batchCustomElements = batchCustomElements;

    // Feature detect which polyfill needs to be imported.
    var polyfills = [];
    if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) ||
      (window.ShadyDOM && window.ShadyDOM.force)) {
      polyfills.push('sd');
    }
    if (!window.customElements || window.customElements.forcePolyfill) {
      polyfills.push('ce');
    }

    var needsTemplate = (function () {
      // no real <template> because no `content` property (IE and older browsers)
      var t = document.createElement('template');
      if (!('content' in t)) {
        return true;
      }
      // broken doc fragment (older Edge)
      if (!(t.content.cloneNode() instanceof DocumentFragment)) {
        return true;
      }
      // broken <template> cloning (Edge up to at least version 17)
      var t2 = document.createElement('template');
      t2.content.appendChild(document.createElement('div'));
      t.content.appendChild(t2);
      var clone = t.cloneNode(true);
      return (clone.content.childNodes.length === 0 ||
        clone.content.firstChild.content.childNodes.length === 0);
    })();

    // NOTE: any browser that does not have template or ES6 features
    // must load the full suite of polyfills.
    if (!window.Promise || !Array.from || !window.URL || !window.Symbol || needsTemplate) {
      polyfills = ['sd-ce-pf'];
    }

    if (polyfills.length) {
      var polyfillFile = 'bundles/webcomponents-' + polyfills.join('-') + '.js';

      // Load it from the right place.
      if (window.WebComponents.root) {
        url = window.WebComponents.root + polyfillFile;
      } else {
        // Load it from the right place.
        url = urlOf(polyfillFile);
      }

      var newScript = document.createElement('script');
      newScript.src = url;
      // if readyState is 'loading', this script is synchronous
      if (document.readyState === 'loading') {
        // make sure custom elements are batched whenever parser gets to the injected script
        newScript.addEventListener('load', window.WebComponents._batchCustomElements);
        document.addEventListener('DOMContentLoaded', ready);
      } else {
        newScript.addEventListener('load', function () {
          asyncReady();
        });
        newScript.addEventListener('error', function () {
          throw new Error('Could not load polyfill bundle' + url);
        });
      }
      document.head.appendChild(newScript);
    } else {
      // if readyState is 'complete', script is loaded imperatively on a spec-compliant browser, so just fire WCR
      if (document.readyState === 'complete') {
        polyfillsLoaded = true;
        fireEvent();
      } else {
        // this script may come between DCL and load, so listen for both, and cancel load listener if DCL fires
        window.addEventListener('load', ready);
        window.addEventListener('DOMContentLoaded', function () {
          window.removeEventListener('load', ready);
          ready();
        });
      }
    }
  }
})();
